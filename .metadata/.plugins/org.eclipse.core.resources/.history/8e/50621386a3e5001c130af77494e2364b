package tree;

public class AVLTree {
	Node root;
	public void Create() {
		root = null;
	}
	public void Insert(int parentValue, int insertValue) {
		
	}
	public void Delete(int deleteValue) {
		
	}
	public void Update(int currentValue, int newValue) {
		
	}
	public void Traverse(String algorithm) {
		if (algorithm == "DFS") {
			TraverseDFS(root);
		}else if (algorithm == "BFS") {
			Node[] initList = new Node[99];
			initList[0] = root;
			TraverseBFS(initList);
		}
	}
	private void TraverseDFS(Node aNode) {
		if (aNode != null) {
			System.out.println(aNode.value);
			TraverseDFS(aNode.left);
			TraverseDFS(aNode.right);
		}
	}
	private void TraverseBFS(Node[] listParent) {
		Node[] listChildren = new Node[99];
		if (listParent[0] != null) {
			for (int i = 0; i < listParent.length; i++ ) {
				if (listParent[i] != null) {
					System.out.println(listParent[i].value);
					for (int j = 0; j < listChildren.length; j++) {
						if (listChildren[j] == null) {
							if( listParent[i].left == null && listParent[i].right != null) {
								listChildren[j] = listParent[i].right;
								break;
							}else {
								listChildren[j] = listParent[i].left;
								listChildren[j+1] = listParent[i].right;
								break;
							}
						}
					}
				}
			}
			TraverseBFS(listChildren);
		}
	}
	
	public Node Search(int value) {
		if (root != null) {
			while(true) {
				if (value < root.value) {
					root = root.left;
					if (root == null) {
						break;
					}
				}else if (value > root.value) {
					root = root.right;
					if (root == null) {
						break;
					}
				}else {
					break;
				}
			}
		}
		return root;
	}
}




